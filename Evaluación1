#include <iostream>
#include <string.h>
#include <vector>
#include <algorithm>

using namespace std;

class Videojuego
{
public:
    
    string name,developer,console;
    int nserie,price;
    
    virtual Videojuego* clonar() = 0;
    
    virtual void concepcion()
    {
        cout<< "Etapa de Concepto" << endl;
    }
    virtual void diseno()
    {
        cout<< "Etapa de diseño en curso" << endl;
    }
    virtual void planificacion()
    {
        cout<< "Etapa de planificacion en curso" << endl;
    }
    virtual void produccion()
    {
        cout<< "Etapa de produccion en curso" << endl;
    }
    virtual void pruebasDeAceptacion()
    {
        cout<< "Pruebas de aceptacion en curso" << endl;
    }
};//Clase principal de videojuego

template <class SubClase>
class ClonVideojuego : public Videojuego
{
public:
    virtual Videojuego* clonar()
    {
        return new SubClase(dynamic_cast<SubClase&>(*this));
    }
};//Template Subclases


class Estrategia : public ClonVideojuego<Estrategia>
{
private:
};

class Aventura : public ClonVideojuego<Aventura>
{
private:
};

class Aprendizaje : public ClonVideojuego<Aprendizaje>
{
private:
};


class VideogameFactory
{
public:
    template<class T>
    static T* construirVideojuego(string n, string d,string c, int ns, int p)
    {
        T* vg = new T;
        vg->name = n;
        vg->developer = d;
        vg->console = c;
        vg->nserie = ns;
        vg->price = p;
        vg->concepcion();
        vg->diseno();
        vg->planificacion();
        vg->produccion();
        vg->pruebasDeAceptacion();
        return vg;
    }
};

template <class T>
class Inventario {
    
public:
    vector<Videojuego* >* inventario;
    vector<Videojuego* >* regreso;
    
    void crearInventario()
    {
        inventario = new vector<Videojuego*>();
        regreso = new vector<Videojuego*>();
    }
    
    
    void agregar(Videojuego* v)
    {
        inventario->push_back(v);
        cout << v->name << " agregado a inventario" << endl;
    }
    
    void eliminar(Videojuego* v)
    {
        int pos = 0;
        for (int i=0; i<inventario->size(); i++)
        {
            if (inventario->at(i) == v) {
                pos = 1;
                break;
            }
        }
        
        regreso->push_back(inventario->at(pos));
        inventario->erase(inventario->begin() + pos);
        
        cout << v->name << " eliminado del inventario" << endl;
    }
    
    
    void rehacer()
    {
        
        if (regreso->size() > 0)
        {
            
            inventario->push_back(regreso->back());
            regreso->pop_back();
            
            cout << "Se deshizo la operación de eliminado videojuego: " << endl;
            
        }
        
    }
    
    string buscar(string n)
    {
        int i;
        //Buscar la posicion del videojuego
        for (i=0; i<inventario->size(); i++)
        {
            if (inventario->at(i)->name == n) {
                break;
                
            }
        }
        return inventario->at(i)->name;
    }
    
    string buscar(int ns)
    {
        int i;
        //Buscar la posicion del videojuego
        for (i=0; i<inventario->size(); i++)
        {
            if (inventario->at(i)->nserie == ns) {
                break;
                
            }
        }
        return inventario->at(i)->name;
    }
    
    
    void ordenMeMa()
    {
        
        sort( inventario->begin(), inventario->end( ), [ ](Videojuego* a, Videojuego* b )
             {
                 return a->price < b->price;
             });
    }
    
    void ordenMaMe()
    {
        sort( inventario->begin(), inventario->end( ), [ ](Videojuego* a, Videojuego* b )
             {
                 return a->price > b->price;
             });
    }
    
    
    void imprimir()
    {
        for (int i=0; i<inventario->size(); i++)
        {
            cout << inventario->at(i)->name << endl;
        }
    }
    
    void totalElementos()
    {
        cout << "Videojuegos en inventario: " << inventario->size() << endl;
    }
    
};



int main() {
    
    
    //Estrategia
    Videojuego* hw = VideogameFactory::construirVideojuego<Estrategia>("Halo Wars","Bungie","Xbox",6546,500);
    Videojuego* xc = VideogameFactory::construirVideojuego<Estrategia>("Xcom","2k Games","PlayStation 4",3634,350);
    Videojuego* aoe = VideogameFactory::construirVideojuego<Estrategia>("Age of Empires","Microsoft","  PC",7634,299);
    Videojuego* hw2 = hw->clonar();
    Videojuego* xc2 = xc->clonar();
    Videojuego* aoe2= aoe->clonar();
    
    Inventario<Estrategia>* invest = new Inventario<Estrategia>;
    invest->crearInventario();
    invest->agregar(hw);
    invest->agregar(xc);
    invest->agregar(aoe);
    invest->agregar(hw2);
    invest->agregar(xc2);
    invest->agregar(aoe2);
    invest->eliminar(hw2);
    invest->eliminar(xc);
    cout<< "Videojuego:" << invest->buscar(6546)<<endl;
    cout<< "Videojuego:" << invest->buscar("Xcom")<<endl;
    invest->imprimir();
    cout << endl;
    invest->totalElementos();
    cout << endl;
    invest -> rehacer();
    invest -> imprimir();
    cout << endl;
    invest -> ordenMaMe();
    invest -> imprimir();
    cout << endl;
    invest -> ordenMeMa();
    invest -> imprimir();
    
    
    return 0;
}
